#include <search/minimum_moves_to_move_a_box_to_their_target_location.cpp>

TEST(推箱子, minPushBox) {
  // 示例 1：
  // 输入：grid = [["#","#","#","#","#","#"],
  //             ["#","T","#","#","#","#"],
  //             ["#",".",".","B",".","#"],
  //             ["#",".","#","#",".","#"],
  //             ["#",".",".",".","S","#"],
  //             ["#","#","#","#","#","#"]]
  // 输出：3
  // 解释：我们只需要返回推箱子的次数。
  Solution solution;
  vector<vector<char>> grid = {
      {'#', '#', '#', '#', '#', '#'}, {'#', 'T', '#', '#', '#', '#'},
      {'#', '.', '.', 'B', '.', '#'}, {'#', '.', '#', '#', '.', '#'},
      {'#', '.', '.', '.', 'S', '#'}, {'#', '#', '#', '#', '#', '#'}};
  EXPECT_EQ(solution.minPushBox(grid), 3);

  // 示例 2：
  // 输入：grid = [["#","#","#","#","#","#"],
  //              ["#","T","#","#","#","#"],
  //              ["#",".",".","B",".","#"],
  //              ["#","#","#","#",".","#"],
  //              ["#",".",".",".","S","#"],
  //              ["#","#","#","#","#","#"]]
  // 输出：-1
  grid = {{'#', '#', '#', '#', '#', '#'}, {'#', 'T', '#', '#', '#', '#'},
          {'#', '.', '.', 'B', '.', '#'}, {'#', '#', '#', '#', '.', '#'},
          {'#', '.', '.', '.', 'S', '#'}, {'#', '#', '#', '#', '#', '#'}};
  EXPECT_EQ(solution.minPushBox(grid), -1);

  // 示例 3：
  // 输入：grid = [["#","#","#","#","#","#"],
  //              ["#","T",".",".","#","#"],
  //              ["#",".","#","B",".","#"],
  //              ["#",".",".",".",".","#"],
  //              ["#",".",".",".","S","#"],
  //              ["#","#","#","#","#","#"]]
  // 输出：5
  // 解释：向下、向左、向左、向上再向上。
  grid = {{'#', '#', '#', '#', '#', '#'}, {'#', 'T', '.', '.', '#', '#'},
          {'#', '.', '#', 'B', '.', '#'}, {'#', '.', '.', '.', '.', '#'},
          {'#', '.', '.', '.', 'S', '#'}, {'#', '#', '#', '#', '#', '#'}};
  EXPECT_EQ(solution.minPushBox(grid), 5);
}
